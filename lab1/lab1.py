# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15TU62Tm4CrRrN2VUOzgg1OqnW_L3Qwd_
"""

import numpy as np;

#utwórz tablicę zawierającą 10 zer
zeroFilledArray=np.zeros((1,10))

#"utwórz tablicę zawierającą 10 piątek \n"
fiveFilledArray=np.linspace(5,5,10)

#"utwórz tablicę zawierającą liczby od 10 do 50 \n"
toFiftyArray=np.arange(10,51,1)

#"utwórz macierz (tablica wielowymiarowa) o wymiarach 3x3 zawierającą liczby od 0 do 8 \n
toEightArray=np.arange(0,9,1)

#"utwórz macierz jednostkową o wymiarach 3x3 \n"
toEightArray=toEightArray.reshape(3,3)

#utwórz macierz jednostkową o wymiarach 3x3
identityMatrix=np.identity(3)

#utwórz macierz o wymiarach 5x5 zawierającą liczby z dystrybucji normalnej (Gaussa)
gaussNormalMatrix=np.random.normal(size=(5,5))

#utwórz macierz o wymiarach 10x10 zawierającą liczby od 0,01 do 1 z krokiem 0,01
tenTenArray=np.arange(0.01,1.01,0.01)
tenTenArray=tenTenArray.reshape(10,10)

#utwórz tablicę zawierającą 20 liniowo rozłożonych liczb między 0 a 1 (włącznie z 0 i 1)
linearArray=np.linspace(0,1,20)

#utwórz tablicę zawierającą losowe liczby z przedziału (1, 25), następnie zamień ją na macierz o wymiarach 5 x 5 z tymi samymi liczbami
randomArray=24*np.random.random(25,)+1
randomArray=randomArray.reshape(5,5)

#oblicz sumę wszystkich liczb w ww. macierzy
sumOfElements=np.sum(randomArray)

#oblicz średnią wszystkich liczb w ww. macierzy
averageOfElements=np.average(randomArray)

#oblicz standardową dewiację dla liczb w ww. macierzy
standardDeviation=np.std(randomArray)

#oblicz sumę każdej kolumny ww. macierzy i zapisz ją do tablicy.
columnSums=randomArray.sum(axis=0)

#utwórz macierz o wymiarach 5x5 zawierającą losowe liczby z przedziału (0, 100)
secondRandomArray=99*np.random.rand(5,5)

#oblicz medianę tych liczb
arrayMedian=np.median(secondRandomArray)

#znajdź najmniejszą liczbę tej macierzy
minValueFromArray=np.min(secondRandomArray)

#znajdź największą liczbę tej macierzy
maxValueFromArray=np.max(secondRandomArray)

#utwórz macierz o wymiarach różnych od siebie i większych od 1, zawierającą losowe liczby z przedziału (0, 100)
notEqualRandomArray=99*np.random.random(20,)+1
notEqualRandomArray=notEqualRandomArray.reshape(4,5)

#i dokonaj jej transpozycji
transposedNotEqualRandomArray=notEqualRandomArray.transpose()

#utwórz dwie macierze o odpowiednich wymiarach (doczytać), większych od 2
firstMatrix=24*np.random.random(25,)+1
firstMatrix=firstMatrix.reshape(5,5)
secondMatrix=24*np.random.random(25,)+1
secondMatrix=secondMatrix.reshape(5,5)

#dodaj je do siebie
sumOfMatrix=np.add(firstMatrix,secondMatrix)

#utwórz dwie macierze o odpowiednich wymiarach (doczytać) różnych od siebie i większych od 2, a następnie pomnóż je przez siebie za pomocą dwóch różnych funkcji
matmulOfMatrix=np.matmul(firstMatrix,secondMatrix)
multiplyOfMatrix=np.multiply(firstMatrix,secondMatrix)

print("utwórz tablicę zawierającą 10 zer \n")
print(zeroFilledArray,"\n")
print("utwórz tablicę zawierającą 10 piątek \n")
print(fiveFilledArray,"\n")
print("utwórz tablicę zawierającą liczby od 10 do 50 \n")
print(toFiftyArray,"\n")
print("utwórz macierz (tablica wielowymiarowa) o wymiarach 3x3 zawierającą liczby od 0 do 8 \n")
print (toEightArray,"\n")
print("utwórz macierz jednostkową o wymiarach 3x3 \n")
print (identityMatrix,"\n")
print("utwórz macierz o wymiarach 5x5 zawierającą liczby z dystrybucji normalnej (Gaussa) \n")
print (gaussNormalMatrix,"\n")
print("utwórz macierz o wymiarach 10x10 zawierającą liczby od 0,01 do 1 z krokiem 0,01 \n")
print(tenTenArray,"\n")
print("utwórz tablicę zawierającą 20 liniowo rozłożonych liczb między 0 a 1 (włącznie z 0 i 1) \n")
print(linearArray)
print("utwórz tablicę zawierającą losowe liczby z przedziału (1, 25), następnie zamień ją na macierz o wymiarach 5 x 5 z tymi samymi liczbami \n")
print(randomArray,"\n")
print("oblicz sumę wszystkich liczb w ww. macierzy \n")
print(sumOfElements,"\n")
print("oblicz średnią wszystkich liczb w ww. macierzy \n")
print(averageOfElements,"\n")
print("oblicz standardową dewiację dla liczb w ww. macierzy \n")
print(standardDeviation,"\n")
print("oblicz sumę każdej kolumny ww. macierzy i zapisz ją do tablicy. \n")
print(columnSums,"\n")
print("utwórz macierz o wymiarach 5x5 zawierającą losowe liczby z przedziału (0, 100) \n")
print(secondRandomArray,"\n")
print("oblicz medianę tych liczb \n")
print(arrayMedian,"\n")
print("znajdź najmniejszą liczbę tej macierzy \n")
print(minValueFromArray,"\n")
print("znajdź największą liczbę tej macierzy \n")
print(maxValueFromArray,"\n")
print("utwórz macierz o wymiarach różnych od siebie i większych od 1, zawierającą losowe liczby z przedziału (0, 100) \n")
print(notEqualRandomArray,"\n")
print("i dokonaj jej transpozycji \n")
print(transposedNotEqualRandomArray,"\n")
print("utwórz dwie macierze o odpowiednich wymiarach (doczytać), większych od 2 \n")
print(firstMatrix,"\n")
print(secondMatrix,"\n")
print("dodaj je do siebie \n")
print(sumOfMatrix,"\n")
print("utwórz dwie macierze o odpowiednich wymiarach (doczytać) różnych od siebie i większych od 2, a następnie pomnóż je przez siebie za pomocą dwóch różnych funkcji \n")
print("matmul: \n")
print(matmulOfMatrix,"\n")
print("multiply: \n")
print(multiplyOfMatrix,"\n")